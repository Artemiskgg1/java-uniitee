JAVA  
__________________________________________________________________________________

JDK:
    - Java Developement Kit
    - everything that is needed to create/modify/compile/debug/test and run the program
    - JRE + javac (java compiler)
    - source code of all libraries

JRE: 
    - Java Runtime Environment
    - java Standard Libray (all classes in java.lang, java.util, java.io, java.sql)
    - JVM

JVM:
    - Java Virtual Machine
    - executes programs
    - loads all the byte code form .class file into the memory
    - manages memory/garbage collection/multi threading/..
    - platform independent
__________________________________________________________________________________

BASIC STRUCTURE OF JAVA PROGARAM
    FUNCTIONS
        - code to execute a particular task
        - camelCaseConvention
    CLASSES
        - collection of similar kind of functions
        - template to make object entity
        - PascalConvention
_________________________________________________________________________________

ANATOMY OF A JAVA PROGARAM
    - DOCUMENTATION             (suggested)
    - PAKAGE STATEMENTS         (Optional)
    - IMPORT STATEMENTS         (Optional)
    - INTERFACE STATEMENTS      (Optional)
    - CLASS DEFINITIONS         (Optional)
    - MAIN METHOD CLASS         (Essential)
__________________________________________________________________________________

DATA TYPES

    - PRIMITIVE
        - range of values: -2^(8n -1) to 2^(8n-1)-1  // n -> no of bytes, 8 bits in 1 byte
        - intrensic

    - NON PRIMITIVE
        - derieved
        
LITERALS
    - const value that can be assigned to a variable
        // classes in java.lang
        - char ch = 'a'; // single quotes
        - int num = 23;
        - double db = 2.334;
        - float flt = 22.33f;
        - long num = 11111111113333333l;
        - boolean a = true;
        - String str = "Milady";
___________________________________________________________________________________
 
METHOD SIGNATURE 
 package something; // group related classes --> like folder in file directory
 public class Main{ // main class
    public static void main(string[] args){ // entry point into application
        //code
    }
 }

pakage:
    - to group classes

public static void main
    - public: 
        - access modifier
        - else JRE would not have the access to call it
    - static: 
        - so that JRE can call the method directly on the class without creating instance 
        - functions act independently even on being a part of a class
        - creation of object of main class is not required to run the function
    - void: 
        - return type
        - does not return anything
    - main:
        - JRE access through main

    - string[] args:
        - Array of string  arguments that can be passed to the program
        - System.out.println(args[0]);
        - javac .\CLA.java
        - java CLA KEKEKEKkikikii
        - Argument 0: KEKEKEKkikikii
__________________________________________________________________________________

println --> prints new line after argument
__________________________________________________________________________________

CONSTRUCTOR:
    - automatically gets called on object creation
    - init objects
    - should not make logic.. only for init obj
__________________________________________________________________________________

DYNAMIC METHOD DISPATCH
_________________________________________________________________________________

THREAD
    - Concurency v/s Parallelisim
        - Concurrency involves managing multiple tasks in overlapping time periods
        - Parallelism involves executing multiple tasks simultaneously
    - 

_________________________________________________________________________________

Maven:
    - Build Tool for JVM-based Languages
    - Project Management Tool       (simplifies dependency management and builds automation.)
    - Downloads 3rd party Dependencies in java projects
    - Provides a standardized project structure through conventions.
    - Uses plugins for tasks such as compiling, testing, packaging, and deploying code.


POM
    It is the fundamental XML file (pom.xml) used in Maven to define:
        - Project details (name, version, dependencies).
        - Build configuration (plugins, goals, Java version).
        - Dependency management (external libraries).
        - Profiles for different environments.

    - pom.xml
        Maven projects are defined in a pom.xml file, which contains

        - <groupId>     
                - Uniquely identifies the project across all projects in the world.
                - reverse domain name convention (e.g., com.example).
        - <artifactId> 
                - project id
                - The name of the project (used in dependency resolution).
        - <version>
                - Specifies the version of the project.
        - <properties>
                - Defines project-wide properties, such as Java version configuration.
        - <build>
                -Contains build-related configurations, including:
                - <plugins>
                        - testing, test output, deployement ...
        - <dependencies>
                // downloads dependencies and make them available to project
                <dependency>
                    <groupId>       </groupId>
                    <artifactId>    </artifactId>
                    <version>       </version>
                    <scope>         </scope>        // complie, test, runtime, provided
                </dependency>

LIFE CYCLE OF MAVEN

    1. CLEAN
        clean         -> rm all the files by previous built
    2. DEFAULT
        validate       → Checks if the project is correct.
        compile        → Compiles the source code.
        test           → Runs unit tests.
        package        → Bundles compiled code into a JAR or WAR.
        verify         → Runs additional tests/checks.
        install        → Installs the package in your local repository.
        deploy         → Deploys the package to a remote repository.
    3. SITE

    mvn compile        # Compile code
    mvn test           # Run tests
    mvn package        # Package into JAR/WAR
    mvn install        # Install in local repo (~/.m2)
    mvn clean package  # Clean old files & package

DEPENDENCY MANAGEMENT

_________________________________________________________________________________